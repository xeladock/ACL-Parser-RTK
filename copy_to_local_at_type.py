import os
import sys
import shutil
import subprocess
import re
import requests
import time
# from concurrent.futures import ThreadPoolExecutor, as_completed


def get_base_dir():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É, –≥–¥–µ –ª–µ–∂–∏—Ç exe –∏–ª–∏ —Å–∫—Ä–∏–ø—Ç"""
    if getattr(sys, "frozen", False):
        # –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –∫–∞–∫ exe —á–µ—Ä–µ–∑ PyInstaller
        return os.path.dirname(sys.executable)
    return os.path.dirname(os.path.abspath(__file__))

# def get_base_dir():
#     """
#     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –∏–ª–∏ —Å–∫—Ä–∏–ø—Ç.
#     –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Nuitka (--onefile –∏ --standalone) –∏ PyInstaller.
#     """
#     if getattr(sys, 'frozen', False) or hasattr(sys, 'nuitka'):
#         # –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: Nuitka –∏–ª–∏ PyInstaller
#         if hasattr(sys, 'nuitka') and platform.system() == 'Linux':
#             # Nuitka onefile –Ω–∞ Linux: –∏—Å–ø–æ–ª—å–∑—É–µ–º sys.argv[0] –∏–ª–∏ /proc/self/exe
#             exe_path = sys.argv[0]
#             try:
#                 # /proc/self/exe –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –≤ sandbox
#                 exe_path = os.path.realpath('/proc/self/exe')
#             except OSError:
#                 pass  # –ï—Å–ª–∏ /proc/self/exe –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º sys.argv[0]
#         else:
#             # PyInstaller –∏–ª–∏ Nuitka standalone: sys.executable —Ä–∞–±–æ—Ç–∞–µ—Ç
#             exe_path = sys.executable
#         base_dir = os.path.dirname(os.path.realpath(exe_path))
#         # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∞)
#         # print(f"sys.argv[0]: {sys.argv[0]}")
#         # print(f"sys.executable: {sys.executable}")
#         # print(f"Executable path (resolved): {exe_path}")
#         # print(f"Base dir (compiled): {base_dir}")
#         return base_dir
#     # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Å–∫—Ä–∏–ø—Ç—É
#     base_dir = os.path.dirname(os.path.abspath(__file__))
#     # print(f"Base dir (dev): {base_dir}")
#     return base_dir


def make_writable(path):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–µ–ª–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    for root, dirs, files in os.walk(path, topdown=False):
        for name in files:
            fpath = os.path.join(root, name)
            try:
                os.chmod(fpath, 0o777)
            except Exception as e:
                yield (f"[WARN] chmod file {fpath}: {e}")
        for name in dirs:
            dpath = os.path.join(root, name)
            try:
                os.chmod(dpath, 0o777)
            except Exception as e:
                yield (f"[WARN] chmod dir {dpath}: {e}")


BASE_DIR = get_base_dir()
CONFIG_DIR = os.path.join(BASE_DIR, "collected_files_clear")


def get_device_platform(device_name, netbox_token):
    # results = []
    # files_to_check = []
    # token = netbox_token
    # # –æ–≥—Ä–∞–Ω–∏—á–∏–º –Ω–∞–ø—Ä–∏–º–µ—Ä 8 –ø–æ—Ç–æ–∫–æ–≤, —á—Ç–æ–±—ã –Ω–µ —à—Ç—É—Ä–º–æ–≤–∞—Ç—å API
    # with ThreadPoolExecutor(max_workers=8) as executor:
    #     future_map = {executor.submit(process_file, f, token): f for f in files_to_check}
    #     for future in as_completed(future_map):
    #         file_path, platform = future.result()
    #         results.append((file_path, platform))
    #         # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    #         print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {file_path} -> {platform}")

    NETBOX_URL = 'https://netbox.rt.ru/api'

    headers2 = {
        "Authorization": f"Token {netbox_token}",
        "Accept": "application/json",
        "User-Agent": "Mozilla/5.0 (compatible; GitLabParser/1.0)"
    }

    url = f"{NETBOX_URL}/dcim/devices/?name={device_name}"
    response = requests.get(url, headers=headers2, verify=False, timeout=10)
    data = response.json()

    if data['count'] == 0:
        return None

    device = data['results'][0]
    platform = device.get('platform')
    if platform['name'] in ('Cisco UCS', 'AlteonOS', 'Citrix MPX', 'IronWare', 'Cisco WLC'): return None
    return platform['name'] if platform else None
def process_file(file_path, token):
    device_name = os.path.splitext(os.path.basename(file_path))[0]
    platform = get_device_platform(device_name, token)
    return file_path, platform

def main(gitlab_login, gitlab_password, netbox_token):
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (success, logs)
    """
    # logs = []

    # def make_writable(path):
    #     """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–Ω–∏–º–∞–µ—Ç –∞—Ç—Ä–∏–±—É—Ç '—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è' –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫"""
    #     for root, dirs, files in os.walk(path, topdown=False):
    #         for name in files:
    #             file_path = os.path.join(root, name)
    #             os.chmod(file_path, os.stat.S_IWRITE)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º stat.S_IWRITE
    #         for name in dirs:
    #             dir_path = os.path.join(root, name)
    #             os.chmod(dir_path, os.stat.S_IWRITE)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º stat.S_IWRITE

    def remove_dir_with_git(clone_dir):
        time.sleep(2)
        """–£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –≤–∫–ª—é—á–∞—è –ø–∞–ø–∫—É .git"""
        if os.path.exists(clone_dir):
            make_writable(clone_dir)
            time.sleep(2)
            shutil.rmtree(clone_dir)
            time.sleep(1)
            # yield(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ {clone_dir} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        # else:
        #     yield(f"–ü–∞–ø–∫–∞ {clone_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    try:
        yield ("–°—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        time.sleep(1)
        # üîπ —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        if not os.path.exists(CONFIG_DIR):
            os.makedirs(CONFIG_DIR, exist_ok=True)
            yield (f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö {CONFIG_DIR} ")
            time.sleep(1)
        # else:
        #     yield (f"–ü–∞–ø–∫–∞ {CONFIG_DIR} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

        # –ø—Ä–∏–º–µ—Ä ‚Äî –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitLab
        # –∑–∞–º–µ–Ω–∏—Ç–µ url_repo –∏ branch –Ω–∞ —Å–≤–æ–∏
        repo_url = f"https://{gitlab_login}:{gitlab_password}@configs.net.rt.ru/dc/configs.git"

        clone_dir = os.path.join(BASE_DIR, "collected_files")

        yield (f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {clone_dir}")
        time.sleep(1)
        yield (f"–°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å gitlab...")
        time.sleep(1)
        if os.path.exists(clone_dir):
            shutil.rmtree(clone_dir)
            time.sleep(2)

        # yield (f"–°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
        result = subprocess.run(
            ["git", "clone", "--depth=1", repo_url, clone_dir]
            # stdout=subprocess.PIPE,
            # stderr=subprocess.STDOUT,
            # text=True
        )
        # logs.append(result.stdout)

        if result.returncode != 0:
            yield ("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.")
            return
        yield (f"–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω—ã...")
        time.sleep(1)
        yield (f"–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤... \n-------")
        # üîπ –ø—Ä–∏–º–µ—Ä ‚Äî –ø–µ—Ä–µ–Ω–æ—Å —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ –ø–∞–ø–∫—É CONFIG_DIR
        for root, dirs, files in os.walk(clone_dir):
            for file in files:

                if file.startswith(
                        ("PRNG-DC", "DVPR-DC", "SZSP-DC", "CEMO-DC", "CEMS-DC", "UREK-DC", "UKFR-DC", "SINO-DC")):
                    src_path = os.path.join(root, file)
                    device_name = os.path.splitext(file)[0]

                    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ NetBox
                    platform = get_device_platform(device_name, netbox_token)

                    if not platform or not platform.strip():
                        continue

                    platform = platform.replace("/", os.sep)
                    platform = re.sub(r'[<>:"/\\|?*]', '_', platform)
                    platform_dir = os.path.join(CONFIG_DIR, platform)
                    os.makedirs(platform_dir, exist_ok=True)

                    dst_path = os.path.join(platform_dir, file)

                    shutil.copy2(src_path, dst_path)
                    yield (f"‚úÖ [{platform}] ‚Üí {dst_path}")
        # üîπ —á–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        time.sleep(2)
        git_folder = os.path.join(clone_dir, ".git")
        if os.path.exists(git_folder):
            try:
                remove_dir_with_git(clone_dir)
                # shutil.rmtree(git_folder, onerror=remove_readonly)
                # print("‚úÖ –£–¥–∞–ª–µ–Ω–∞ .git")
            except Exception as e:
                yield f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {clone_dir}: {e}"
                # print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ .git: {e}")
        # shutil.rmtree(clone_dir, ignore_errors=True)

        yield ("\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω—ã –∏ –æ—á–∏—â–µ–Ω—ã.")
        # return True, logs

    except Exception as e:
        yield (f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        # return False, logs


if __name__ == "__main__":
    if len(sys.argv) < 4:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python copy_to_local_at_type.py <login> <password> <netbox_token>")
        sys.exit(1)

    login, password, token = sys.argv[1], sys.argv[2], sys.argv[3]
    success, logs = main(login, password, token)
    for line in logs:
        print(line)
    sys.exit(0 if success else 1)