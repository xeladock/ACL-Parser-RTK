import ipaddress
import os
import threading
from re import sub as rs
import tkinter as tk
from tkinter import messagebox, scrolledtext
import Api_search3, copy_to_local_at_type
from datetime import datetime
from tkinter import filedialog
import shutil

CONFIG_DIR = "collected_files_clear"

PREFIX_LABELS = {
    "–í–æ–ª–≥–∞": "PRNG-DC",
    "–î–í": "DVPR-DC",
    "–°–ó": "SZSP-DC",
    "–¶–µ–Ω—Ç—Ä": "CEMO-DC",
    "–ö–¶": "CEMS-DC",
    "–£—Ä–∞–ª": "UREK-DC",
    "–Æ–≥": "UKFR-DC",
    "–°–∏–±–∏—Ä—å": "SINO-DC",
}

PLATFORM_GROUPS = {
    "Cisco ASA": ["Cisco ASA"],
    "Cisco Firepower": ["Cisco FXOS"],
    "Cisco IOS": ["Cisco IOS"],
    "Cisco IOS XE": ["Cisco IOS XE"],
    "Cisco NX-OS": ["Cisco NX-OS"],
    "FortiOS": ["FortiOS"],
    "Huawei": ["Huawei VRP"],
    "–ü—Ä–æ—á–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞": [   # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        "B4COM BCOM-OS-DC", "EdgeCore", "IBM_Lenovo Network OS",
        "HP ProCurve", "Dell Networking OS", "Juniper Junos", "Eltex", "Cisco IOS XR", "Cisco PIX"
    ],
}

def add_placeholder(entry, placeholder="any", color="gray"):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ—Ä—ã–π placeholder, –∫–æ—Ç–æ—Ä—ã–π –∏—Å—á–µ–∑–∞–µ—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ."""
    default_fg = entry.cget("fg")

    def on_focus_in(event):
        if entry.get() == placeholder and entry.cget("fg") == color:
            entry.delete(0, tk.END)
            entry.config(fg=default_fg)

    def on_focus_out(event):
        if not entry.get().strip():
            entry.insert(0, placeholder)
            entry.config(fg=color)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è placeholder –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    entry.insert(0, placeholder)
    entry.config(fg=color)

    # –ü—Ä–∏–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
    entry.bind("<FocusIn>", on_focus_in)
    entry.bind("<FocusOut>", on_focus_out)

def limit_entry_length(entry_widget, max_length=50):
    """–ó–∞–ø—Ä–µ—â–∞–µ—Ç –≤–≤–æ–¥ —Å—Ç—Ä–æ–∫ –¥–ª–∏–Ω–Ω–µ–µ max_length —Å–∏–º–≤–æ–ª–æ–≤."""
    def on_validate(P):
        return len(P) <= max_length
    vcmd = (entry_widget.register(on_validate), "%P")
    entry_widget.config(validate="key", validatecommand=vcmd)

def toggle_all(group_vars, master_var):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ master_var (True/False) –¥–ª—è –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
    """
    state = master_var.get()
    for var in group_vars:
        var.set(state)

def update_master(master_var, group_vars):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω—ã–π —á–µ–∫–±–æ–∫—Å: –µ—Å–ª–∏ –≤—Å–µ –≤—ã–±—Ä–∞–Ω—ã ‚Äî True, –∏–Ω–∞—á–µ False
    """
    master_var.set(all(v.get() for v in group_vars))

def select_all(event):
    event.widget.select_range(0, tk.END)   # –≤—ã–¥–µ–ª–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    event.widget.icursor(tk.END)           # –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü
    return "break"

def validate_ip_or_network(value: str) -> bool:
    if not value or value.lower() == "any":
        return True
    try:
        if "/" in value:
            ipaddress.ip_network(value, strict=False)
        else:
            ipaddress.ip_address(value)
        return True
    except ValueError:
        return False

def fix_entry_shortcuts(entry_widget):
    # Ctrl+A ‚Äî –≤—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë
    def select_all(event=None):
        entry_widget.focus_set()
        entry_widget.selection_range(0, tk.END)
        return "break"

    # Ctrl+C
    def copy(event=None):
        entry_widget.event_generate("<<Copy>>")
        return "break"

    # Ctrl+X
    def cut(event=None):
        entry_widget.event_generate("<<Cut>>")
        return "break"

    # Ctrl+V ‚Äî –≤—Å—Ç–∞–≤–∫–∞ —Å –∑–∞–º–µ–Ω–æ–π –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ
    def paste(event=None):
        try:
            selection = entry_widget.selection_get()
            # –µ—Å–ª–∏ –≤—ã–¥–µ–ª–µ–Ω —Ç–µ–∫—Å—Ç ‚Äî —É–¥–∞–ª–∏—Ç—å –µ–≥–æ
            entry_widget.delete("sel.first", "sel.last")
        except tk.TclError:
            # –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
            pass
        entry_widget.event_generate("<<Paste>>")
        return "break"

    # –±–∏–Ω–¥–∏–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–Ω–∏–∂–Ω–∏–π –∏ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)
    entry_widget.bind("<Control-a>", select_all)
    entry_widget.bind("<Control-A>", select_all)
    entry_widget.bind("<Control-c>", copy)
    entry_widget.bind("<Control-C>", copy)
    entry_widget.bind("<Control-v>", paste)
    entry_widget.bind("<Control-V>", paste)
    entry_widget.bind("<Control-x>", cut)
    entry_widget.bind("<Control-X>", cut)


class ParserApp:
    # LIGHT_BG = "#f0f0f0"
    def __init__(self, root):
        self.all_regions_var = None
        self.root = root
        self.root.title("ACL Parser. –í–µ—Ä—Å–∏—è –¥–ª—è AltLinux.")
        self.root.geometry("1100x820")
        self.root.configure(bg="#f0f0f0")
        self.root.resizable(False, False)
        if not os.path.exists(CONFIG_DIR) or not os.listdir(CONFIG_DIR):
            self.open_download_window()
        else:
            self.build_main_window()

    def save_output(self):
        text = self.output.get("1.0", tk.END).strip()
        if not text:
                # –û–∫–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª–µ –≤—ã–≤–æ–¥–∞ –ø—É—Å—Ç–æ–µ
                messagebox.showinfo("–û–π!", "–ü–æ–ª–µ –≤—ã–≤–æ–¥–∞ –ø—É—Å—Ç–æ–µ.")
                return
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–∫–Ω–∞ –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        # –±–µ—Ä—ë–º –≤–≤–µ–¥—ë–Ω–Ω—ã–µ IP (–∏–ª–∏ any –µ—Å–ª–∏ –ø—É—Å—Ç–æ)
        src_ip = self.src_entry.get().strip() or "any"
        dst_ip = self.dst_entry.get().strip() or "any"

        def sanitize(name):
            return rs(r'[\\/:*?"<>|]', '_', name)

        src_ip = sanitize(src_ip)
        dst_ip = sanitize(dst_ip)


        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞: src-dst-dd-mm-yyyy-hh-mm.txt
        timestamp = datetime.now().strftime("%d-%m-%Y-%H-%M")
        filename = f"{src_ip}-{dst_ip}-{timestamp}.txt"

        # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É)
        filepath = filedialog.asksaveasfilename(
            initialfile=filename,
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if not filepath:
            return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
        try:
            text = self.output.get("1.0", tk.END).strip()
            with open(filepath, "w", encoding="utf-8") as f:
                f.write(text)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{filepath}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{e}")

    def delete_config_folder(self):
        """–£–¥–∞–ª—è–µ—Ç –ø–∞–ø–∫—É collected_files_clear –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        if not os.path.exists(CONFIG_DIR):
            messagebox.showinfo("–ò–Ω—Ñ–æ.",
                                "–ü–∞–ø–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return

        # –û–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        answer = messagebox.askyesno("–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å?",
                                     "–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π?\n"
                                     "–í—Å–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.")
        if not answer:
            return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–ù–µ—Ç¬ª

        try:
            shutil.rmtree(CONFIG_DIR)
            messagebox.showinfo("–£—Å–ø–µ—Ö!", "–ü–∞–ø–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω–∞.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞!", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É:\n{e}")
            return

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ main –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        for widget in self.root.winfo_children():
            widget.destroy()
        self.open_download_window()


    # ---------------- MAIN WINDOW ----------------
    def build_main_window(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ –æ–∫–Ω–∞

        self.root.grid_columnconfigure(2, weight=0)

        self.root.grid_rowconfigure(2, weight=0)

        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –∏ –ø—Ä–∏–∂–∏–º–∞–µ–º –µ–≥–æ –∫ –ª–µ–≤–æ–º—É –≤–µ—Ä—Ö–Ω–µ–º—É —É–≥–ª—É
        frame = tk.Frame(self.root,bg="#f0f0f0")
        frame.grid(row=0, column=0, sticky="nw", padx=5, pady=5)

        # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —Ñ—Ä–µ–π–º–∞
        # frame.grid_columnconfigure(0, weight=0)
        frame.grid_columnconfigure(2, weight=2)
        # frame.grid_rowconfigure(0, weight=0)
        frame.grid_rowconfigure(2, weight=0)

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞, —á—Ç–æ–±—ã –ª—É—á—à–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        input_frame = tk.Frame(frame,bg="#f0f0f0")
        input_frame.grid(row=0, column=0, sticky="nw", padx=5, pady=9)  # üîπ –ù–æ–≤—ã–π —Ñ—Ä–µ–π–º, –ø—Ä–∏–∂–∞—Ç—ã–π –≤–ª–µ–≤–æ

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        tk.Label(input_frame, text="Source IP:",bg="#f0f0f0").grid(row=0, column=0, sticky="w", padx=(10, 5))  #  sticky="w" –≤–º–µ—Å—Ç–æ "e"
        self.src_entry = tk.Entry(input_frame, width=30)
        self.src_entry.grid(row=0, column=1, sticky="nw", padx=5)  # üîπ –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª–µ –ø—Ä–∏–∂–∞—Ç–æ –≤–ª–µ–≤–æ
        # self.src_entry.bind("<Control-a>", select_all)
        # self.src_entry.bind("<Control-A>", select_all)
        fix_entry_shortcuts(self.src_entry)
        limit_entry_length(self.src_entry, 50)
        add_placeholder(self.src_entry, "any", "gray")

        tk.Label(input_frame, text="Destination IP:",bg="#f0f0f0").grid(row=1, column=0, sticky="w", padx=(10, 5))  # üîπ sticky="w" –≤–º–µ—Å—Ç–æ "e"
        self.dst_entry = tk.Entry(input_frame, width=30)
        self.dst_entry.grid(row=1, column=1, sticky="nw", padx=5)
        # self.dst_entry.bind("<Control-a>", select_all)
        # self.dst_entry.bind("<Control-A>", select_all)
        fix_entry_shortcuts(self.dst_entry)
        limit_entry_length(self.dst_entry, 50)
        add_placeholder(self.dst_entry, "any", "gray")

        self.strict_var = tk.BooleanVar(value=False)
        tk.Checkbutton(input_frame, text="–°—Ç—Ä–æ–≥–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ",bg="#f0f0f0", highlightthickness=0,
                       variable=self.strict_var).grid(row=2, column=0, columnspan=2, sticky="w", padx=(2, 5), pady=(10, 5))

        # üîπ –ì—Ä—É–ø–ø–∞ —á–µ–∫–±–æ–∫—Å–æ–≤

        # tk.LabelFrame(frame, text="–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º —Ñ–∞–π–ª–æ–≤:")
        prefix_frame = tk.LabelFrame(frame, text="–§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:",bg="#f0f0f0")
        prefix_frame.grid(row = 0, column = 1, sticky = "nw", padx = (10, 10))

        self.prefix_vars = {}
        col = 0
        row = 0
        for label, prefix in PREFIX_LABELS.items():
            var = tk.BooleanVar(value=True)
            cb = tk.Checkbutton(prefix_frame, text=label,bg="#f0f0f0", highlightthickness=0, variable=var)
            cb.grid(row=row, column=col, sticky="w", padx=5)
            self.prefix_vars[label] = var
            col += 1
            if col >= 4:  # –¥–µ–ª–∞–µ–º —Ç–∞–±–ª–∏—Ü—É 2 —Å—Ç—Ä–æ–∫–∏ √ó 4 —Å—Ç–æ–ª–±—Ü–∞
                col = 0
                row += 1
        self.all_regions_var = tk.BooleanVar(value=True)
        
        all_regions_cb = tk.Checkbutton(
            prefix_frame,
            text="–í—Å–µ",
            highlightthickness=0,
            bg="#f0f0f0",
            variable=self.all_regions_var,
            command=lambda: toggle_all(list(self.prefix_vars.values()), self.all_regions_var)
        )
        all_regions_cb.grid(row=row + 1, column=0, sticky="w", padx=5, pady=(5, 0))


        self.platform_vars = {}
        platform_frame = tk.LabelFrame(frame, text="–§–∏–ª—å—Ç—Ä –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é:",bg="#f0f0f0")
        platform_frame.grid(row=0, column=1, sticky="nw",padx=320)

        col, row = 0, 0
        for label in PLATFORM_GROUPS.keys():
            var = tk.BooleanVar(value=True)
            cb = tk.Checkbutton(platform_frame, text=label,bg="#f0f0f0", highlightthickness=0,variable=var)
            cb.grid(row=row, column=col, sticky="w", padx=5)
            self.platform_vars[label] = var
            col += 1
            if col >= 3:  # –¥–µ–ª–∞–µ–º 3 —Å—Ç–æ–ª–±—Ü–∞
                col = 0
                row += 1
        self.all_platforms_var = tk.BooleanVar(value=True)
        all_platforms_cb = tk.Checkbutton(
            platform_frame,
            text="–í—Å–µ",
            highlightthickness=0,
            bg="#f0f0f0",
            variable=self.all_platforms_var,
            command=lambda: toggle_all(list(self.platform_vars.values()), self.all_platforms_var)
        )
        all_platforms_cb.grid(row=row + 1, column=0, sticky="w", padx=5, pady=(5, 0))
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        self.search_btn = tk.Button(frame, text="–ü–æ–∏—Å–∫", command=self.run_search)
        self.search_btn.grid(row=4, column=0, columnspan=2, pady=10,sticky="w", padx=500)

        # –û–∫–Ω–æ –≤—ã–≤–æ–¥–∞
        self.output = scrolledtext.ScrolledText(frame, wrap=tk.WORD, width=133, height=31.1,state="disabled")
        self.output.grid(row=5, column=0, columnspan=2, sticky="w", padx=5)
        self.save_btn = tk.Button(frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ –¥–∏—Å–∫", command=self.save_output)
        self.save_btn.grid(row=6, column=0, columnspan=2, padx=6,pady=(10,0), sticky="w")
        self.delete_btn = tk.Button(frame, text="–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π",
                                    command=self.delete_config_folder)
        self.delete_btn.grid(row=6, column=1, columnspan=2,padx=470, pady=(10, 0), sticky="w")


    def run_search(self):

        self.output.config(state="disabled")
        src_ip = self.src_entry.get().strip() or 'any'
        dst_ip = self.dst_entry.get().strip() or 'any'

        if not validate_ip_or_network(src_ip):
            messagebox.showerror("–û—à–∏–±–∫–∞!", f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Source IP: {src_ip}")
            return
        if not validate_ip_or_network(dst_ip):
            messagebox.showerror("–û—à–∏–±–∫–∞!", f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Destination IP: {dst_ip}")
            return

        # –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ ‚Üí –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ "any"
        if not src_ip:
            src_ip = "any"
        if not dst_ip:
            dst_ip = "any"

        self.output.config(state="normal")

        # –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã

        # --- –±–ª–æ–∫ —á–µ–∫–±–æ–∫—Å–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º ---
        enabled_region_labels = [label for label, var in self.prefix_vars.items() if var.get()]
        enabled_prefixes = [PREFIX_LABELS[label] for label in enabled_region_labels]

        if not enabled_prefixes:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–≥–∏–æ–Ω!")
            return

        self.output.delete("1.0", tk.END)
        self.output.config(state="normal")
        self.output.insert(tk.END, f"–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ ACL –¥–ª—è {src_ip} ‚Üí {dst_ip}\n\n")
        self.output.insert(tk.END, f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã: {', '.join(enabled_region_labels)}\n")
        self.output.see(tk.END)

        # --- –±–ª–æ–∫ —á–µ–∫–±–æ–∫—Å–æ–≤ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º ---
        enabled_platform_labels = [label for label, var in self.platform_vars.items() if var.get()]
        enabled_platforms = []
        for label in enabled_platform_labels:
            enabled_platforms.extend(PLATFORM_GROUPS[label])

        if not enabled_platforms:
            messagebox.showerror("–û—à–∏–±–∫–∞!", "–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É!")
            return

        # –≤—ã–≤–æ–¥–∏–º –≤ –ª–æ–≥
        self.output.insert(tk.END, f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {', '.join(enabled_platform_labels)}\n\n")
        self.output.see(tk.END)

        strict_mode = self.strict_var.get()

        self.search_btn.config(state=tk.DISABLED)
        self.save_btn.config(state=tk.DISABLED)
        self.delete_btn.config(state=tk.DISABLED)

        def worker():
            res = Api_search3.main(src_ip, dst_ip, enabled_prefixes, enabled_platforms, strict_mode)
            for line in res:
                self.output.insert(tk.END, line + "\n")
                self.output.see(tk.END)
            self.output.insert(tk.END, "‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.\n")
            self.search_btn.config(state=tk.NORMAL)
            self.save_btn.config(state=tk.NORMAL)
            self.delete_btn.config(state=tk.NORMAL)
            self.output.config(state="disabled")


        threading.Thread(target=worker, daemon=True).start()
    # ---------------- DOWNLOAD WINDOW ----------------
    def open_download_window(self):

        win = tk.Toplevel(self.root)
        win.title("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
        win.configure(bg="#f0f0f0")
        win.geometry("600x800")  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        win.resizable(False, False)  # –∑–∞–ø—Ä–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        for widget in self.root.winfo_children():
            widget.destroy()



        win = tk.Frame(self.root, padx=10, pady=10,bg="#f0f0f0")
        win.pack(fill="both", expand=True)

        win.grid_columnconfigure(0, weight=0)
        win.grid_columnconfigure(1, weight=1)

        tk.Label(win, text="GitLab login:",bg="#f0f0f0").grid(row=0, column=0, sticky="e",padx=(0,5))
        login_entry = tk.Entry(win, width=30)
        login_entry.grid(row=0, column=1,sticky="nw", padx=5)

        tk.Label(win, text="GitLab password:",bg="#f0f0f0").grid(row=1, column=0, sticky="e",padx=(0,5))
        pass_entry = tk.Entry(win, width=30, show="*")
        pass_entry.grid(row=1, column=1,sticky="nw", padx=5)

        tk.Label(win, text="NetBox API token:",bg="#f0f0f0").grid(row=2, column=0, sticky="e",padx=(0,5))
        token_entry = tk.Entry(win, width=60, show="*")
        token_entry.grid(row=2, column=1,sticky="nw", padx=5)

        log_area = scrolledtext.ScrolledText(win, wrap=tk.WORD, width=135, height=35)
        log_area.grid(row=4, column=0, columnspan=2, pady=10)

        def download():
            login = login_entry.get().strip()
            password = pass_entry.get().strip()
            token = token_entry.get().strip()

            if not login or not password or not token:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏ —Ç–æ–∫–µ–Ω!")
                return

            # log_area.insert(tk.END, "–ù–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...\n")
            log_area.see(tk.END)

            download_btn.config(state=tk.DISABLED)  # üîπ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            # delete_btn.config(state=tk.NORMAL)
            def worker():
                success = False
                try:
                    for line in copy_to_local_at_type.main(login, password, token):
                        log_area.insert(tk.END, line + "\n")
                        log_area.see(tk.END)
                        if "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω—ã –∏ –æ—á–∏—â–µ–Ω—ã." in line:
                            success = True

                    if success:
                        messagebox.showinfo("–£—Å–ø–µ—Ö!", "–°–∫–∞—á–∞–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ!", parent=win)
                        win.destroy()
                        self.build_main_window()
                    else:
                        messagebox.showerror("–û—à–∏–±–∫–∞!", "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!", parent=win)
                        download_btn.config(state=tk.NORMAL)

                except Exception as e:
                    log_area.insert(tk.END, f"‚ùå –û—à–∏–±–∫–∞: {e}\n")
                    log_area.see(tk.END)
                    download_btn.config(state=tk.NORMAL)  # üîπ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
                    # delete_btn.config(state=tk.NORMAL)

            threading.Thread(target=worker, daemon=True).start()

        download_btn = tk.Button(win, text="–°–∫–∞—á–∞—Ç—å", command=download)
        download_btn.grid(row=3, column=0, columnspan=2, pady=(13, 0))

if __name__ == "__main__":
    root = tk.Tk()
    app = ParserApp(root)
    root.mainloop()